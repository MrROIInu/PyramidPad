-- Drop existing tables if they exist
DROP TABLE IF EXISTS public.orders CASCADE;
DROP TABLE IF EXISTS public.tokens CASCADE;

-- Create tokens table
CREATE TABLE public.tokens (
  symbol text PRIMARY KEY,
  name text NOT NULL,
  total_supply numeric NOT NULL,
  contract_address text NOT NULL,
  price_usd numeric NOT NULL DEFAULT 0,
  market_cap numeric NOT NULL DEFAULT 0,
  volume_24h numeric NOT NULL DEFAULT 0,
  price_change_7d numeric NOT NULL DEFAULT 0,
  preminted numeric NOT NULL DEFAULT 0,
  minted numeric NOT NULL DEFAULT 0,
  open_orders integer NOT NULL DEFAULT 0,
  created_at timestamptz DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamptz DEFAULT CURRENT_TIMESTAMP
);

-- Create orders table
CREATE TABLE public.orders (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  from_token text NOT NULL,
  to_token text NOT NULL,
  from_amount numeric NOT NULL,
  to_amount numeric NOT NULL,
  swap_tx text NOT NULL,
  claimed boolean DEFAULT false,
  claim_count integer DEFAULT 0,
  status text DEFAULT 'active',
  created_at timestamptz DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamptz DEFAULT CURRENT_TIMESTAMP
);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers
CREATE TRIGGER update_tokens_updated_at
  BEFORE UPDATE ON public.tokens
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_orders_updated_at
  BEFORE UPDATE ON public.orders
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Enable RLS
ALTER TABLE public.tokens ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Enable read access for all users" ON public.tokens
  FOR SELECT TO anon USING (true);

CREATE POLICY "Enable insert for all users" ON public.tokens
  FOR INSERT TO anon WITH CHECK (true);

CREATE POLICY "Enable update for all users" ON public.tokens
  FOR UPDATE TO anon USING (true);

CREATE POLICY "Enable read access for all users" ON public.orders
  FOR SELECT TO anon USING (true);

CREATE POLICY "Enable insert for all users" ON public.orders
  FOR INSERT TO anon WITH CHECK (true);

CREATE POLICY "Enable update for all users" ON public.orders
  FOR UPDATE TO anon USING (true);