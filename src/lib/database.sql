-- Create swaps table function
create or replace function create_swaps_table()
returns void
language plpgsql
security definer
as $$
begin
  create table if not exists public.swaps (
    id bigint generated by default as identity primary key,
    from_token text not null,
    to_token text not null,
    from_amount numeric not null,
    to_amount numeric not null,
    tax_amount numeric not null,
    wallet_address text not null,
    transaction_id text not null,
    status text default 'pending' not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
  );

  alter table public.swaps enable row level security;

  create policy "Enable read access for all users" 
    on public.swaps for select 
    to anon
    using (true);

  create policy "Enable insert for all users" 
    on public.swaps for insert 
    to anon
    with check (true);
end;
$$;

-- Create orders table function
create or replace function create_orders_table()
returns void
language plpgsql
security definer
as $$
begin
  create table if not exists public.orders (
    id bigint generated by default as identity primary key,
    from_token text not null,
    to_token text not null,
    from_amount numeric not null,
    to_amount numeric not null,
    swap_tx text not null,
    claimed boolean default false not null,
    claim_count integer default 0 not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
  );

  alter table public.orders enable row level security;

  create policy "Enable read access for all users" 
    on public.orders for select 
    to anon
    using (true);

  create policy "Enable insert for all users" 
    on public.orders for insert 
    to anon
    with check (true);

  create policy "Enable update for all users" 
    on public.orders for update 
    to anon
    using (true)
    with check (true);
end;
$$;

-- Create liquidity pool table function
create or replace function create_liquidity_pool_table()
returns void
language plpgsql
security definer
as $$
begin
  create table if not exists public.liquidity_pool (
    token text primary key,
    amount numeric not null default 0,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
  );

  alter table public.liquidity_pool enable row level security;

  create policy "Enable read access for all users" 
    on public.liquidity_pool for select 
    to anon
    using (true);

  create policy "Enable insert for authenticated users" 
    on public.liquidity_pool for insert 
    to authenticated
    with check (true);

  create policy "Enable update for authenticated users" 
    on public.liquidity_pool for update 
    to authenticated
    using (true)
    with check (true);
end;
$$;

-- Create updated_at trigger function
create or replace function handle_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$;

-- Add triggers
create trigger handle_updated_at_swaps
  before update on public.swaps
  for each row
  execute function handle_updated_at();

create trigger handle_updated_at_orders
  before update on public.orders
  for each row
  execute function handle_updated_at();

create trigger handle_updated_at_liquidity_pool
  before update on public.liquidity_pool
  for each row
  execute function handle_updated_at();