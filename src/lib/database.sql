-- Drop existing objects
drop trigger if exists handle_updated_at_swaps on public.swaps;
drop trigger if exists handle_updated_at_orders on public.orders;
drop trigger if exists handle_updated_at_liquidity_pool on public.liquidity_pool;
drop trigger if exists handle_updated_at_orderbook on public.orderbook;
drop trigger if exists handle_updated_at_trades on public.trades;
drop function if exists handle_updated_at cascade;
drop function if exists create_tables cascade;
drop table if exists public.swaps cascade;
drop table if exists public.orders cascade;
drop table if exists public.liquidity_pool cascade;
drop table if exists public.orderbook cascade;
drop table if exists public.trades cascade;

-- Create updated_at trigger function
create or replace function handle_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$;

-- Create tables function
create or replace function create_tables()
returns void
language plpgsql
security definer
as $$
begin
  -- Create swaps table
  create table if not exists public.swaps (
    id bigint generated by default as identity primary key,
    from_token text not null,
    to_token text not null,
    from_amount numeric not null,
    to_amount numeric not null,
    tax_amount numeric not null,
    wallet_address text not null,
    transaction_id text not null,
    status text default 'pending' not null,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
  );

  -- Create orders table
  create table if not exists public.orders (
    id bigint generated by default as identity primary key,
    from_token text not null,
    to_token text not null,
    from_amount numeric not null,
    to_amount numeric not null,
    swap_tx text not null,
    claimed boolean default false,
    claim_count integer default 0,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
  );

  -- Create liquidity pool table
  create table if not exists public.liquidity_pool (
    token text primary key,
    amount numeric not null,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
  );

  -- Create orderbook table
  create table if not exists public.orderbook (
    id bigint generated by default as identity primary key,
    from_token text not null,
    to_token text not null,
    from_amount numeric not null,
    to_amount numeric not null,
    price numeric not null,
    status text default 'active' not null,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
  );

  -- Create trades table
  create table if not exists public.trades (
    id bigint generated by default as identity primary key,
    from_token text not null,
    to_token text not null,
    from_amount numeric not null,
    to_amount numeric not null,
    price numeric not null,
    created_at timestamptz default now()
  );

  -- Add triggers
  drop trigger if exists handle_updated_at_swaps on public.swaps;
  create trigger handle_updated_at_swaps
    before update on public.swaps
    for each row
    execute function handle_updated_at();

  drop trigger if exists handle_updated_at_orders on public.orders;
  create trigger handle_updated_at_orders
    before update on public.orders
    for each row
    execute function handle_updated_at();

  drop trigger if exists handle_updated_at_liquidity_pool on public.liquidity_pool;
  create trigger handle_updated_at_liquidity_pool
    before update on public.liquidity_pool
    for each row
    execute function handle_updated_at();

  drop trigger if exists handle_updated_at_orderbook on public.orderbook;
  create trigger handle_updated_at_orderbook
    before update on public.orderbook
    for each row
    execute function handle_updated_at();

  -- Enable RLS
  alter table public.swaps enable row level security;
  alter table public.orders enable row level security;
  alter table public.liquidity_pool enable row level security;
  alter table public.orderbook enable row level security;
  alter table public.trades enable row level security;

  -- Create policies
  drop policy if exists "Enable read access for all users" on public.swaps;
  create policy "Enable read access for all users" on public.swaps
    for select to anon using (true);

  drop policy if exists "Enable insert for all users" on public.swaps;
  create policy "Enable insert for all users" on public.swaps
    for insert to anon with check (true);

  drop policy if exists "Enable update for all users" on public.swaps;
  create policy "Enable update for all users" on public.swaps
    for update to anon using (true);

  drop policy if exists "Enable read access for all users" on public.orders;
  create policy "Enable read access for all users" on public.orders
    for select to anon using (true);

  drop policy if exists "Enable insert for all users" on public.orders;
  create policy "Enable insert for all users" on public.orders
    for insert to anon with check (true);

  drop policy if exists "Enable update for all users" on public.orders;
  create policy "Enable update for all users" on public.orders
    for update to anon using (true);

  drop policy if exists "Enable read access for all users" on public.liquidity_pool;
  create policy "Enable read access for all users" on public.liquidity_pool
    for select to anon using (true);

  drop policy if exists "Enable insert for all users" on public.liquidity_pool;
  create policy "Enable insert for all users" on public.liquidity_pool
    for insert to anon with check (true);

  drop policy if exists "Enable update for all users" on public.liquidity_pool;
  create policy "Enable update for all users" on public.liquidity_pool
    for update to anon using (true);

  drop policy if exists "Enable read access for all users" on public.orderbook;
  create policy "Enable read access for all users" on public.orderbook
    for select to anon using (true);

  drop policy if exists "Enable insert for all users" on public.orderbook;
  create policy "Enable insert for all users" on public.orderbook
    for insert to anon with check (true);

  drop policy if exists "Enable update for all users" on public.orderbook;
  create policy "Enable update for all users" on public.orderbook
    for update to anon using (true);

  drop policy if exists "Enable read access for all users" on public.trades;
  create policy "Enable read access for all users" on public.trades
    for select to anon using (true);

  drop policy if exists "Enable insert for all users" on public.trades;
  create policy "Enable insert for all users" on public.trades
    for insert to anon with check (true);
end;
$$;

-- Initialize the tables
select create_tables();