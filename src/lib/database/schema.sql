-- Drop existing tables if they exist
DROP TABLE IF EXISTS public.rxd20_token_prices CASCADE;
DROP TABLE IF EXISTS public.rxd20_price_history CASCADE;
DROP TABLE IF EXISTS public.rxd20_market_stats CASCADE;

-- Create new token prices table
CREATE TABLE IF NOT EXISTS public.rxd20_token_prices (
    symbol TEXT PRIMARY KEY,
    price_usd NUMERIC NOT NULL DEFAULT 0,
    market_cap NUMERIC NOT NULL DEFAULT 0,
    volume_24h NUMERIC DEFAULT 0,
    price_change_24h NUMERIC DEFAULT 0,
    price_change_7d NUMERIC DEFAULT 0,
    last_trade_at TIMESTAMPTZ,
    last_updated TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Create new price history table with 1-minute intervals
CREATE TABLE IF NOT EXISTS public.rxd20_price_history (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    symbol TEXT NOT NULL,
    price_usd NUMERIC NOT NULL,
    volume NUMERIC DEFAULT 0,
    market_cap NUMERIC,
    timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Create market statistics table
CREATE TABLE IF NOT EXISTS public.rxd20_market_stats (
    symbol TEXT NOT NULL,
    interval TEXT NOT NULL,  -- '1h', '24h', '7d'
    open_price NUMERIC NOT NULL,
    close_price NUMERIC NOT NULL,
    high_price NUMERIC NOT NULL,
    low_price NUMERIC NOT NULL,
    volume NUMERIC DEFAULT 0,
    timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (symbol, interval)
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_price_history_symbol_timestamp 
    ON public.rxd20_price_history (symbol, timestamp DESC);

CREATE INDEX IF NOT EXISTS idx_market_stats_symbol_interval 
    ON public.rxd20_market_stats (symbol, interval, timestamp DESC);

-- Function to update price history
CREATE OR REPLACE FUNCTION update_rxd20_price_history()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.rxd20_price_history (
        symbol,
        price_usd,
        market_cap,
        timestamp
    ) VALUES (
        NEW.symbol,
        NEW.price_usd,
        NEW.market_cap,
        NEW.last_updated
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to update market statistics
CREATE OR REPLACE FUNCTION update_rxd20_market_stats()
RETURNS TRIGGER AS $$
DECLARE
    v_interval TEXT;
    v_start_time TIMESTAMPTZ;
BEGIN
    -- Update stats for different intervals
    FOR v_interval, v_start_time IN 
        SELECT unnest(ARRAY['1h', '24h', '7d']),
               unnest(ARRAY[
                   NOW() - INTERVAL '1 hour',
                   NOW() - INTERVAL '24 hours',
                   NOW() - INTERVAL '7 days'
               ])
    LOOP
        -- Update or insert market stats
        INSERT INTO public.rxd20_market_stats (
            symbol,
            interval,
            open_price,
            close_price,
            high_price,
            low_price,
            volume,
            timestamp
        )
        SELECT 
            NEW.symbol,
            v_interval,
            FIRST_VALUE(price_usd) OVER (ORDER BY timestamp),
            NEW.price_usd,
            MAX(price_usd),
            MIN(price_usd),
            SUM(volume),
            NOW()
        FROM public.rxd20_price_history
        WHERE symbol = NEW.symbol
        AND timestamp >= v_start_time
        ON CONFLICT (symbol, interval) 
        DO UPDATE SET
            close_price = EXCLUDED.close_price,
            high_price = GREATEST(rxd20_market_stats.high_price, EXCLUDED.close_price),
            low_price = LEAST(rxd20_market_stats.low_price, EXCLUDED.close_price),
            volume = EXCLUDED.volume,
            timestamp = NOW();
    END LOOP;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers
DROP TRIGGER IF EXISTS trigger_update_price_history ON public.rxd20_token_prices;
CREATE TRIGGER trigger_update_price_history
    AFTER UPDATE OF price_usd ON public.rxd20_token_prices
    FOR EACH ROW
    EXECUTE FUNCTION update_rxd20_price_history();

DROP TRIGGER IF EXISTS trigger_update_market_stats ON public.rxd20_token_prices;
CREATE TRIGGER trigger_update_market_stats
    AFTER UPDATE OF price_usd ON public.rxd20_token_prices
    FOR EACH ROW
    EXECUTE FUNCTION update_rxd20_market_stats();

-- Enable RLS
ALTER TABLE public.rxd20_token_prices ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.rxd20_price_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.rxd20_market_stats ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Enable read access for all users" ON public.rxd20_token_prices
    FOR SELECT TO anon USING (true);

CREATE POLICY "Enable update for users" ON public.rxd20_token_prices
    FOR UPDATE TO anon USING (true);

CREATE POLICY "Enable read access for all users" ON public.rxd20_price_history
    FOR SELECT TO anon USING (true);

CREATE POLICY "Enable insert for users" ON public.rxd20_price_history
    FOR INSERT TO anon WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON public.rxd20_market_stats
    FOR SELECT TO anon USING (true);

CREATE POLICY "Enable update for users" ON public.rxd20_market_stats
    FOR UPDATE TO anon USING (true);