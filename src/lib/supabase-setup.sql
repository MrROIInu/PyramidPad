-- Create token_price_history table
CREATE TABLE IF NOT EXISTS public.token_price_history (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  symbol TEXT NOT NULL,
  price_usd NUMERIC NOT NULL,
  timestamp TIMESTAMPTZ DEFAULT now()
);

-- Create index for faster queries
CREATE INDEX IF NOT EXISTS idx_token_price_history_symbol_timestamp 
  ON token_price_history (symbol, timestamp);

-- Create function to log price history
CREATE OR REPLACE FUNCTION log_price_history()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO token_price_history (symbol, price_usd)
  VALUES (NEW.symbol, NEW.price_usd);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for price history logging
DROP TRIGGER IF EXISTS log_price_history_trigger ON public.tokens;
CREATE TRIGGER log_price_history_trigger
  AFTER UPDATE OF price_usd ON public.tokens
  FOR EACH ROW
  EXECUTE FUNCTION log_price_history();

-- Update token price function to include history
CREATE OR REPLACE FUNCTION update_token_price()
RETURNS TRIGGER AS $$
DECLARE
  impact_factor DECIMAL := 0.001; -- 0.1% price impact
BEGIN
  -- Update prices when order is claimed
  IF TG_OP = 'UPDATE' AND NEW.claimed = true AND OLD.claimed = false THEN
    -- Update from_token price (decrease)
    IF NEW.from_token != 'RXD' THEN
      UPDATE tokens 
      SET 
        price_usd = price_usd * (1 - impact_factor),
        last_updated = now()
      WHERE symbol = NEW.from_token;
    END IF;
    
    -- Update to_token price (increase)
    IF NEW.to_token != 'RXD' THEN
      UPDATE tokens 
      SET 
        price_usd = price_usd * (1 + impact_factor),
        last_updated = now()
      WHERE symbol = NEW.to_token;
    END IF;
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Enable RLS for price history
ALTER TABLE public.token_price_history ENABLE ROW LEVEL SECURITY;

-- Create policies for price history
CREATE POLICY "Enable read access for all users" ON public.token_price_history
  FOR SELECT TO anon USING (true);