-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create price history trigger function
CREATE OR REPLACE FUNCTION update_price_history()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.price_usd != OLD.price_usd THEN
    INSERT INTO price_history (token_symbol, price_usd)
    VALUES (NEW.symbol, NEW.price_usd);
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create tables function
CREATE OR REPLACE FUNCTION create_tables()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Create tokens table
  CREATE TABLE IF NOT EXISTS public.tokens (
    symbol text PRIMARY KEY,
    name text NOT NULL,
    total_supply numeric NOT NULL,
    contract_address text NOT NULL,
    price_usd numeric NOT NULL DEFAULT 0,
    market_cap numeric NOT NULL DEFAULT 0,
    volume_24h numeric NOT NULL DEFAULT 0,
    price_change_7d numeric NOT NULL DEFAULT 0,
    preminted numeric NOT NULL DEFAULT 0,
    minted numeric NOT NULL DEFAULT 0,
    open_orders integer NOT NULL DEFAULT 0,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
  );

  -- Create orders table
  CREATE TABLE IF NOT EXISTS public.orders (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    from_token text NOT NULL,
    to_token text NOT NULL,
    from_amount numeric NOT NULL,
    to_amount numeric NOT NULL,
    swap_tx text NOT NULL,
    claimed boolean DEFAULT false,
    claim_count integer DEFAULT 0,
    status text DEFAULT 'active',
    wallet_address text,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
  );

  -- Create wallet_addresses table
  CREATE TABLE IF NOT EXISTS public.wallet_addresses (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    address text NOT NULL UNIQUE,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
  );

  -- Create price_history table
  CREATE TABLE IF NOT EXISTS public.price_history (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    token_symbol text NOT NULL,
    price_usd numeric NOT NULL,
    timestamp timestamptz DEFAULT now()
  );

  -- Add triggers
  DROP TRIGGER IF EXISTS handle_updated_at_tokens ON public.tokens;
  CREATE TRIGGER handle_updated_at_tokens
    BEFORE UPDATE ON public.tokens
    FOR EACH ROW
    EXECUTE FUNCTION handle_updated_at();

  DROP TRIGGER IF EXISTS handle_updated_at_orders ON public.orders;
  CREATE TRIGGER handle_updated_at_orders
    BEFORE UPDATE ON public.orders
    FOR EACH ROW
    EXECUTE FUNCTION handle_updated_at();

  DROP TRIGGER IF EXISTS handle_updated_at_wallet_addresses ON public.wallet_addresses;
  CREATE TRIGGER handle_updated_at_wallet_addresses
    BEFORE UPDATE ON public.wallet_addresses
    FOR EACH ROW
    EXECUTE FUNCTION handle_updated_at();

  DROP TRIGGER IF EXISTS handle_price_history ON public.tokens;
  CREATE TRIGGER handle_price_history
    AFTER UPDATE ON public.tokens
    FOR EACH ROW
    WHEN (NEW.price_usd IS DISTINCT FROM OLD.price_usd)
    EXECUTE FUNCTION update_price_history();

  -- Enable RLS
  ALTER TABLE public.tokens ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.wallet_addresses ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.price_history ENABLE ROW LEVEL SECURITY;

  -- Create policies
  DROP POLICY IF EXISTS "Enable read access for all users" ON public.tokens;
  CREATE POLICY "Enable read access for all users" ON public.tokens
    FOR SELECT TO anon USING (true);

  DROP POLICY IF EXISTS "Enable insert for all users" ON public.tokens;
  CREATE POLICY "Enable insert for all users" ON public.tokens
    FOR INSERT TO anon WITH CHECK (true);

  DROP POLICY IF EXISTS "Enable update for all users" ON public.tokens;
  CREATE POLICY "Enable update for all users" ON public.tokens
    FOR UPDATE TO anon USING (true);

  DROP POLICY IF EXISTS "Enable read access for all users" ON public.orders;
  CREATE POLICY "Enable read access for all users" ON public.orders
    FOR SELECT TO anon USING (true);

  DROP POLICY IF EXISTS "Enable insert for all users" ON public.orders;
  CREATE POLICY "Enable insert for all users" ON public.orders
    FOR INSERT TO anon WITH CHECK (true);

  DROP POLICY IF EXISTS "Enable update for all users" ON public.orders;
  CREATE POLICY "Enable update for all users" ON public.orders
    FOR UPDATE TO anon USING (true);

  DROP POLICY IF EXISTS "Enable read access for all users" ON public.wallet_addresses;
  CREATE POLICY "Enable read access for all users" ON public.wallet_addresses
    FOR SELECT TO anon USING (true);

  DROP POLICY IF EXISTS "Enable read access for all users" ON public.price_history;
  CREATE POLICY "Enable read access for all users" ON public.price_history
    FOR SELECT TO anon USING (true);

  DROP POLICY IF EXISTS "Enable insert for all users" ON public.price_history;
  CREATE POLICY "Enable insert for all users" ON public.price_history
    FOR INSERT TO anon WITH CHECK (true);

  -- Insert test wallets
  INSERT INTO public.wallet_addresses (address)
  VALUES 
    ('1PhM4yjL9PXGoJxo6qfx8JbaEM3NPaF5Bt'),
    ('1LqoPnuUm3kdKvPJrELoe6JY3mJc9C7d1e')
  ON CONFLICT (address) DO NOTHING;

  -- Create index for price history queries
  CREATE INDEX IF NOT EXISTS idx_price_history_token_timestamp 
    ON price_history (token_symbol, timestamp DESC);
END;
$$;

-- Execute the create_tables function
SELECT create_tables();