-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create activity log trigger function
CREATE OR REPLACE FUNCTION log_activity()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO activity_log (
    event_type,
    order_id,
    from_token,
    to_token,
    from_amount,
    to_amount,
    wallet_address
  ) VALUES (
    TG_OP,
    NEW.id,
    NEW.from_token,
    NEW.to_token,
    NEW.from_amount,
    NEW.to_amount,
    NEW.wallet_address
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create price update trigger function
CREATE OR REPLACE FUNCTION update_token_price()
RETURNS TRIGGER AS $$
DECLARE
  impact_factor DECIMAL := 0.001; -- 0.1% price impact
BEGIN
  -- Update prices when order is claimed
  IF TG_OP = 'UPDATE' AND NEW.claimed = true AND OLD.claimed = false THEN
    -- Update from_token price (decrease)
    IF NEW.from_token != 'RXD' THEN
      UPDATE tokens 
      SET price_usd = price_usd * (1 - impact_factor)
      WHERE symbol = NEW.from_token;
    END IF;
    
    -- Update to_token price (increase)
    IF NEW.to_token != 'RXD' THEN
      UPDATE tokens 
      SET price_usd = price_usd * (1 + impact_factor)
      WHERE symbol = NEW.to_token;
    END IF;
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create tables function
CREATE OR REPLACE FUNCTION create_tables()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Create activity_log table
  CREATE TABLE IF NOT EXISTS public.activity_log (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_type text NOT NULL,
    order_id bigint NOT NULL,
    from_token text NOT NULL,
    to_token text NOT NULL,
    from_amount numeric NOT NULL,
    to_amount numeric NOT NULL,
    wallet_address text,
    created_at timestamptz DEFAULT now()
  );

  -- Create orders table
  CREATE TABLE IF NOT EXISTS public.orders (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    from_token text NOT NULL,
    to_token text NOT NULL,
    from_amount numeric NOT NULL,
    to_amount numeric NOT NULL,
    swap_tx text NOT NULL,
    claimed boolean DEFAULT false,
    claim_count integer DEFAULT 0,
    status text DEFAULT 'active',
    wallet_address text,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
  );

  -- Create wallet_addresses table
  CREATE TABLE IF NOT EXISTS public.wallet_addresses (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    address text NOT NULL UNIQUE,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
  );

  -- Create tokens table
  CREATE TABLE IF NOT EXISTS public.tokens (
    symbol text PRIMARY KEY,
    price_usd numeric NOT NULL DEFAULT 0,
    market_cap numeric NOT NULL DEFAULT 0,
    last_updated timestamptz DEFAULT now()
  );

  -- Add triggers
  DROP TRIGGER IF EXISTS handle_updated_at_orders ON public.orders;
  CREATE TRIGGER handle_updated_at_orders
    BEFORE UPDATE ON public.orders
    FOR EACH ROW
    EXECUTE FUNCTION handle_updated_at();

  DROP TRIGGER IF EXISTS log_activity_insert ON public.orders;
  CREATE TRIGGER log_activity_insert
    AFTER INSERT ON public.orders
    FOR EACH ROW
    EXECUTE FUNCTION log_activity();

  DROP TRIGGER IF EXISTS log_activity_update ON public.orders;
  CREATE TRIGGER log_activity_update
    AFTER UPDATE ON public.orders
    FOR EACH ROW
    WHEN (OLD.claimed IS DISTINCT FROM NEW.claimed)
    EXECUTE FUNCTION log_activity();

  DROP TRIGGER IF EXISTS update_token_prices ON public.orders;
  CREATE TRIGGER update_token_prices
    AFTER UPDATE ON public.orders
    FOR EACH ROW
    EXECUTE FUNCTION update_token_price();

  -- Enable RLS
  ALTER TABLE public.activity_log ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.wallet_addresses ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.tokens ENABLE ROW LEVEL SECURITY;

  -- Create policies
  DROP POLICY IF EXISTS "Enable read access for all users" ON public.activity_log;
  CREATE POLICY "Enable read access for all users" ON public.activity_log
    FOR SELECT TO anon USING (true);

  DROP POLICY IF EXISTS "Enable read access for all users" ON public.orders;
  CREATE POLICY "Enable read access for all users" ON public.orders
    FOR SELECT TO anon USING (true);

  DROP POLICY IF EXISTS "Enable insert for all users" ON public.orders;
  CREATE POLICY "Enable insert for all users" ON public.orders
    FOR INSERT TO anon WITH CHECK (true);

  DROP POLICY IF EXISTS "Enable update for all users" ON public.orders;
  CREATE POLICY "Enable update for all users" ON public.orders
    FOR UPDATE TO anon USING (true);

  DROP POLICY IF EXISTS "Enable read access for all users" ON public.wallet_addresses;
  CREATE POLICY "Enable read access for all users" ON public.wallet_addresses
    FOR SELECT TO anon USING (true);

  DROP POLICY IF EXISTS "Enable read access for all users" ON public.tokens;
  CREATE POLICY "Enable read access for all users" ON public.tokens
    FOR SELECT TO anon USING (true);

  -- Insert test wallets
  INSERT INTO public.wallet_addresses (address)
  VALUES 
    ('1PhM4yjL9PXGoJxo6qfx8JbaEM3NPaF5Bt'),
    ('1LqoPnuUm3kdKvPJrELoe6JY3mJc9C7d1e')
  ON CONFLICT (address) DO NOTHING;

  -- Create indexes
  CREATE INDEX IF NOT EXISTS idx_activity_log_created_at 
    ON activity_log (created_at DESC);
  CREATE INDEX IF NOT EXISTS idx_orders_wallet_address 
    ON orders (wallet_address);
  CREATE INDEX IF NOT EXISTS idx_orders_status 
    ON orders (status);
END;
$$;

-- Execute the create_tables function
SELECT create_tables();