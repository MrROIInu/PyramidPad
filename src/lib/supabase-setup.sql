-- Drop existing objects if they exist
drop trigger if exists handle_updated_at_tokens on public.tokens;
drop trigger if exists handle_updated_at_orders on public.orders;
drop trigger if exists handle_updated_at_wallet_addresses on public.wallet_addresses;
drop function if exists handle_updated_at cascade;
drop table if exists public.tokens cascade;
drop table if exists public.orders cascade;
drop table if exists public.wallet_addresses cascade;

-- Create updated_at trigger function
create or replace function handle_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$;

-- Create tables
create table if not exists public.tokens (
  symbol text primary key,
  name text not null,
  total_supply numeric not null,
  contract_address text not null,
  price_usd numeric not null default 0,
  market_cap numeric not null default 0,
  volume_24h numeric not null default 0,
  price_change_7d numeric not null default 0,
  preminted numeric not null default 0,
  minted numeric not null default 0,
  open_orders integer not null default 0,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table if not exists public.orders (
  id bigint generated by default as identity primary key,
  from_token text not null,
  to_token text not null,
  from_amount numeric not null,
  to_amount numeric not null,
  swap_tx text not null,
  claimed boolean default false,
  claim_count integer default 0,
  status text default 'active',
  wallet_address text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table if not exists public.wallet_addresses (
  id bigint generated by default as identity primary key,
  address text not null unique,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Add triggers
create trigger handle_updated_at_tokens
  before update on public.tokens
  for each row
  execute function handle_updated_at();

create trigger handle_updated_at_orders
  before update on public.orders
  for each row
  execute function handle_updated_at();

create trigger handle_updated_at_wallet_addresses
  before update on public.wallet_addresses
  for each row
  execute function handle_updated_at();

-- Enable RLS
alter table public.tokens enable row level security;
alter table public.orders enable row level security;
alter table public.wallet_addresses enable row level security;

-- Create policies
create policy "Enable read access for all users" on public.tokens
  for select to anon using (true);

create policy "Enable insert for all users" on public.tokens
  for insert to anon with check (true);

create policy "Enable update for all users" on public.tokens
  for update to anon using (true);

create policy "Enable read access for all users" on public.orders
  for select to anon using (true);

create policy "Enable insert for all users" on public.orders
  for insert to anon with check (true);

create policy "Enable update for all users" on public.orders
  for update to anon using (true);

create policy "Enable read access for all users" on public.wallet_addresses
  for select to anon using (true);

-- Insert test wallets
insert into public.wallet_addresses (address)
values 
  ('1PhM4yjL9PXGoJxo6qfx8JbaEM3NPaF5Bt'),
  ('1LqoPnuUm3kdKvPJrELoe6JY3mJc9C7d1e')
on conflict (address) do nothing;

-- Initialize token data
insert into public.tokens (symbol, name, total_supply, contract_address, price_usd, market_cap)
select 
  t.symbol,
  t.name,
  t.total_supply,
  t.contract_address,
  0.000894 * 0.001 as price_usd,
  (0.000894 * 0.001 * t.total_supply) as market_cap
from (
  select 'RADCAT' as symbol, 'RADCAT' as name, 21000000 as total_supply,
    '01a61182dd9c5162bc547e6140d4d9c78f78316b32a2ef0c6063954be87ed10900000000' as contract_address
  union all
  select 'PILIM', 'Pilim', 100000000000,
    'dd9e3fc687377232d2f454e106d91be9dff2f3df67ae69e475609b3dc21debab00000000'
  -- Add all other tokens here
) t
on conflict (symbol) do update
set 
  name = excluded.name,
  total_supply = excluded.total_supply,
  contract_address = excluded.contract_address,
  price_usd = excluded.price_usd,
  market_cap = excluded.market_cap,
  updated_at = now();