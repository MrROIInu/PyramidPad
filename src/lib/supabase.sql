-- Create updated_at trigger function
create or replace function handle_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$;

-- Create tables function
create or replace function create_tables()
returns void
language plpgsql
security definer
as $$
begin
  -- Create wallet_addresses table
  create table if not exists public.wallet_addresses (
    id bigint generated by default as identity primary key,
    address text not null unique,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
  );

  -- Create tokens table
  create table if not exists public.tokens (
    symbol text primary key,
    name text not null,
    total_supply numeric not null,
    contract_address text not null,
    price_usd numeric not null default 0,
    market_cap numeric not null default 0,
    volume_24h numeric not null default 0,
    price_change_7d numeric not null default 0,
    preminted numeric not null default 0,
    minted numeric not null default 0,
    open_orders integer not null default 0,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
  );

  -- Create orders table
  create table if not exists public.orders (
    id bigint generated by default as identity primary key,
    from_token text not null,
    to_token text not null,
    from_amount numeric not null,
    to_amount numeric not null,
    swap_tx text not null,
    claimed boolean default false,
    claim_count integer default 0,
    status text default 'active',
    wallet_address text,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
  );

  -- Add triggers
  drop trigger if exists handle_updated_at_wallet_addresses on public.wallet_addresses;
  create trigger handle_updated_at_wallet_addresses
    before update on public.wallet_addresses
    for each row
    execute function handle_updated_at();

  drop trigger if exists handle_updated_at_tokens on public.tokens;
  create trigger handle_updated_at_tokens
    before update on public.tokens
    for each row
    execute function handle_updated_at();

  drop trigger if exists handle_updated_at_orders on public.orders;
  create trigger handle_updated_at_orders
    before update on public.orders
    for each row
    execute function handle_updated_at();

  -- Enable RLS
  alter table public.wallet_addresses enable row level security;
  alter table public.tokens enable row level security;
  alter table public.orders enable row level security;

  -- Create policies
  drop policy if exists "Enable read access for all users" on public.wallet_addresses;
  create policy "Enable read access for all users" on public.wallet_addresses
    for select to anon using (true);

  drop policy if exists "Enable read access for all users" on public.tokens;
  create policy "Enable read access for all users" on public.tokens
    for select to anon using (true);

  drop policy if exists "Enable insert for all users" on public.tokens;
  create policy "Enable insert for all users" on public.tokens
    for insert to anon with check (true);

  drop policy if exists "Enable update for all users" on public.tokens;
  create policy "Enable update for all users" on public.tokens
    for update to anon using (true);

  drop policy if exists "Enable read access for all users" on public.orders;
  create policy "Enable read access for all users" on public.orders
    for select to anon using (true);

  drop policy if exists "Enable insert for all users" on public.orders;
  create policy "Enable insert for all users" on public.orders
    for insert to anon with check (true);

  drop policy if exists "Enable update for all users" on public.orders;
  create policy "Enable update for all users" on public.orders
    for update to anon using (true);

  -- Insert initial test wallet
  insert into public.wallet_addresses (address)
  values ('1PhM4yjL9PXGoJxo6qfx8JbaEM3NPaF5Bt')
  on conflict (address) do nothing;
end;
$$;

-- Execute the create_tables function
select create_tables();