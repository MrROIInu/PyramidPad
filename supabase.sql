-- Create tables function
create or replace function create_tables()
returns void
language plpgsql
security definer
as $$
begin
  -- Create swaps table if it doesn't exist
  create table if not exists public.swaps (
    id bigint generated by default as identity primary key,
    from_token text not null,
    to_token text not null,
    from_amount numeric not null,
    to_amount numeric not null,
    tax_amount numeric not null,
    wallet_address text not null,
    transaction_id text not null,
    status text default 'pending' not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
  );

  -- Enable RLS for swaps
  alter table public.swaps enable row level security;

  -- Create policies for swaps
  drop policy if exists "Enable read access for all users" on public.swaps;
  create policy "Enable read access for all users" 
    on public.swaps for select 
    to anon
    using (true);

  drop policy if exists "Enable insert for all users" on public.swaps;
  create policy "Enable insert for all users" 
    on public.swaps for insert 
    to anon
    with check (true);

  -- Create updated_at trigger function if it doesn't exist
  create or replace function public.handle_updated_at()
  returns trigger
  language plpgsql
  as $$
  begin
    new.updated_at = timezone('utc'::text, now());
    return new;
  end;
  $$;

  -- Add trigger for swaps
  drop trigger if exists handle_updated_at_swaps on public.swaps;
  create trigger handle_updated_at_swaps
    before update on public.swaps
    for each row
    execute function public.handle_updated_at();
end;
$$;